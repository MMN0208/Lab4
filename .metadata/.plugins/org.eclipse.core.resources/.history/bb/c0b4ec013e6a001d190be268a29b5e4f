/*
 * sched.c
 *
 *  Created on: Nov 17, 2022
 *      Author: ADMIN
 */


#include "sched.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint32_t Current = 0;
uint32_t Size = 0;

void SCH_Init(void) {
	for(uint32_t Index = 0; Index < SCH_MAX_TASKS; Index++) {
		SCH_Delete_Task(Index);
	}
	Size = 0;
}

uint32_t SCH_Add_Task(void (* pFunction)(void), uint32_t DELAY, uint32_t PERIOD) {
	if(Size == SCH_MAX_TASKS - 1) return SCH_MAX_TASKS;

	uint8_t flag = 0;
	uint32_t Index = Current;
	for(; Index < Size && flag == 0; Index++) {
		if(DELAY > SCH_tasks_G[Index].Delay) {
			DELAY -= SCH_tasks_G[Index].Delay;
		}
		else {
			flag = 1;
			SCH_tasks_G[Index].Delay -= DELAY;
		}
	}
	Size += 1;
	if(flag == 1) {
		for(uint32_t Temp = Size - 1; Temp > Index; Temp++) {
			SCH_tasks_G[Temp].pTask = SCH_tasks_G[Temp - 1].pTask;
			SCH_tasks_G[Temp].Delay = SCH_tasks_G[Temp - 1].Delay;
			SCH_tasks_G[Temp].Period = SCH_tasks_G[Temp - 1].Period;
			SCH_tasks_G[Temp].RunMe = SCH_tasks_G[Temp - 1].RunMe;
			SCH_tasks_G[Temp].TaskID += 1;
		}
	}
	SCH_tasks_G[Index].pTask = pFunction;
	SCH_tasks_G[Index].Delay = DELAY;
	SCH_tasks_G[Index].Period = PERIOD;
	SCH_tasks_G[Index].RunMe = 0;
	SCH_tasks_G[Index].TaskID = Index;

	return SCH_tasks_G[Index].TaskID;
}

void SCH_Delete_Task(uint32_t TASK_INDEX) {
	if(SCH_tasks_G[TASK_INDEX].pTask == 0) return;

	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
	SCH_tasks_G[TASK_INDEX].Delay = 0;
	SCH_tasks_G[TASK_INDEX].Period = 0;
	SCH_tasks_G[TASK_INDEX].RunMe = 0;

	Size -= 1;
}

void SCH_Dispatch_Tasks(void) {
	for(uint32_t Index = Current; Index < Size; Index++) {
		if(SCH_tasks_G[Index].pTask != 0 && SCH_tasks_G[Index].RunMe > 0) {
			(*SCH_tasks_G[Index].pTask)();
			SCH_tasks_G[Index].RunMe -= 1;

			if(SCH_tasks_G[Index].Period == 0) {
				SCH_Delete_Task(Index);
			}
		}
	}
}

void SCH_Update(void) {
	if(SCH_tasks_G[Current].Delay == 0) {
		SCH_tasks_G[Current].RunMe += 1;

		if(SCH_tasks_G[Current].Period > 0) {
			SCH_tasks_G[Current].Delay = SCH_tasks_G[Current].Period;
		}

		Current = (Current + 1) % Size;
	}
	else {
		SCH_tasks_G[Current].Delay--;
	}
}
